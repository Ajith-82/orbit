#!/bin/bash
set -e

# Default profile
PROFILE="minimal"

# Help function
show_help() {
    echo "ORBIT Server and CLI Installation"
    echo "========================================================"
    echo "Usage: ./install.sh [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -p, --profile PROFILE    Specify dependency profile (default: minimal)"
    echo "                           Available profiles:"
    echo "                           - minimal: Core dependencies only"
    echo "                           - torch: Adds Torch-based infrence support"
    echo "                           - commercial: Adds commercial cloud providers"
    echo "                           - all: Includes everything"
    echo "                           - development: Adds development tools"
    echo "  -h, --help              Show this help message"
    echo ""
    echo "Examples:"
    echo "  ./install.sh                    # Install with minimal profile"
    echo "  ./install.sh --profile all      # Install all dependencies"
    echo "  ./install.sh -p commercial      # Install commercial providers"
    echo ""
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--profile)
            if [ -z "$2" ]; then
                echo "Error: --profile requires a value"
                show_help
                exit 1
            fi
            PROFILE="$2"
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Error: Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Validate profile
case "$PROFILE" in
    minimal|torch|commercial|all|development)
        # Valid profile
        ;;
    *)
        echo "Error: Invalid profile '$PROFILE'"
        echo "Available profiles: minimal, torch, commercial, all, development"
        exit 1
        ;;
esac

echo "========================================================"
echo "ORBIT Server and CLI Installation"
echo "========================================================"
echo "Using profile: $PROFILE"

# Detect Python
PYTHON_CMD=""
for cmd in python3 python; do
    if command -v $cmd >/dev/null 2>&1; then
        PYTHON_CMD=$cmd
        break
    fi
done

if [ -z "$PYTHON_CMD" ]; then
    echo "Error: Python 3 is required but not found. Please install Python 3 and try again."
    exit 1
fi

# Check Python version
PY_VERSION=$($PYTHON_CMD -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
PY_MAJOR=$(echo $PY_VERSION | cut -d. -f1)
PY_MINOR=$(echo $PY_VERSION | cut -d. -f2)

if [ "$PY_MAJOR" -lt 3 ] || ([ "$PY_MAJOR" -eq 3 ] && [ "$PY_MINOR" -lt 12 ]); then
    echo "Error: Python 3.12 or higher is required (detected $PY_VERSION)"
    exit 1
fi

echo "Found Python $PY_VERSION"

# Check if virtual environment exists
if [ ! -d "venv" ]; then
    echo "Creating Python virtual environment..."
    $PYTHON_CMD -m venv venv
fi

# Activate virtual environment
source venv/bin/activate

# Determine OS-specific settings
if [[ "$OSTYPE" == "darwin"* ]]; then
    PLATFORM="macOS"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    PLATFORM="Linux"
elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    PLATFORM="Windows"
else
    PLATFORM="Unknown"
fi

echo "Detected platform: $PLATFORM"

# Install dependencies using setup.sh - THE KEY FIX IS HERE
echo "Installing dependencies with profile: $PROFILE"
./setup.sh --profile "$PROFILE"

# Create .env file if it doesn't exist
if [ ! -f ".env" ]; then
    echo "Creating .env file from template..."
    cp .env.example .env
    echo "Please edit .env file to set up your API keys and other settings"
fi

# Make CLI scripts executable
chmod +x bin/orbit.py
chmod +x bin/orbit.sh
chmod +x sample-db/sample-db-setup.sh 2>/dev/null || true

# Create symlinks for easy access
mkdir -p ~/bin

if [ "$PLATFORM" == "Windows" ]; then
    echo "Creating Windows shortcuts..."
    echo "@echo off" > orbit.bat
    echo "set SCRIPT_DIR=%~dp0" >> orbit.bat
    echo "call %SCRIPT_DIR%venv\Scripts\activate.bat" >> orbit.bat
    echo "python %SCRIPT_DIR%bin\orbit.py %*" >> orbit.bat
    
    echo "Windows setup complete. You can run ORBIT by using orbit.bat"
else
    echo "Creating symlinks..."
    if [ -f ~/bin/orbit ]; then
        rm ~/bin/orbit
    fi
    ln -sf "$(pwd)/bin/orbit.sh" ~/bin/orbit
    
    # Add ~/bin to PATH if not already there
    if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
        echo 'export PATH="$HOME/bin:$PATH"' >> ~/.bashrc
        echo 'export PATH="$HOME/bin:$PATH"' >> ~/.zshrc 2>/dev/null || true
        echo "Added ~/bin to PATH in shell configuration"
        echo "Please restart your terminal or run 'source ~/.bashrc' to update your PATH"
    fi
    
    echo "Unix/Linux setup complete. You can now run ORBIT by typing 'orbit' in your terminal."
fi

echo "========================================================"
echo "Installation complete!"
echo ""
echo "Next steps:"
echo "1. Edit config.yaml to configure your server"
echo "2. Edit .env to set your API keys and other environment variables"
echo "3. Start the server by running: ./bin/orbit.sh start"
echo "========================================================"
